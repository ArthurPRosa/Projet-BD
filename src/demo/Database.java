package demo;

import javax.xml.crypto.Data;
import java.sql.*;

/**
 * Class handling databases connections, commits, and requests
 */
public class Database {
    public static Connection getDb() {
        return db;
    }

    private static java.sql.Connection db;

    public static void connection() {
        try {
            System.out.println("Importation du driver...");
            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
            System.out.println("Connexion à la base de données...");
            db = DriverManager.getConnection("jdbc:oracle:thin:@oracle1.ensimag.fr:1521:oracle1", "eyraudh", "eyraudh");
            System.out.println("Connection réussie !");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void closeConnection() {
        try {
            db.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void createTables() {
        createTable("CREATE TABLE Categorie (\n" +
                        "    nomCategorie VARCHAR(100)," +
                        "    PRIMARY KEY(nomCategorie)" +
                        ")")
                ;
        createTable
                ("CREATE TABLE APourMere(" +
                        "    nomCategorieFille VARCHAR(100) FOREIGN KEY REFERENCES Categorie (nomCategorie)," +
                        "    nomCategorieMere VARCHAR(100) REFERENCES Categorie (nomCategorie)" +
                        "");
        createTable
                ("CREATE TABLE Restaurant (" +
                        "    emailRest VARCHAR(320)," +
                        "    nomRest VARCHAR(100)," +
                        "    telRest VARCHAR(20)," +
                        "    adresseRest VARCHAR(100)," +
                        "    presentation VARCHAR(500)," +
                        "    capaciteMax INT," +
                        "    noteRest INT," +
                        "    PRIMARY KEY (emailRest)" +
                        ")");
        createTable
                ("CREATE TABLE EstCategorieDe (" +
                        "    emailRest VARCHAR(320) FOREIGN KEY REFERENCES Restaurant (emailRest)," +
                        "    nomCategorie VARCHAR(100) FOREIGN KEY REFERENCES Categorie (nomCategorie))");
        createTable
                ("CREATE TABLE Eval (" +
                        "    dateEval DATE," +
                        "    heureEval TIMESTAMP," +
                        "    avis VARCHAR(500)," +
                        "    note INT," +
                        "    PRIMARY KEY (dateEval, heureEval, avis, note)" +
                        ")");
        createTable
                ("CREATE TABLE Compte (" +
                        "    idCompte INT GENERATED BY DEFAULT AS IDENTITY," +
                        "    PRIMARY KEY (idCompte)" +
                        ")");
        createTable
                ("CREATE TABLE Commande (" +
                        "    dateCommande DATE," +
                        "    heureCommande TIMESTAMP," +
                        "    idCompte INT REFERENCES Compte (idCompte)," +
                        "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                        "    prixCommande INT," +
                        "    statut VARCHAR(30) CHECK (statut IN ('attente','validee','disponible','livraison','annuleeClient','annuleeRest'))," +
                        "    PRIMARY KEY (dateCommande, heureCommande, idCompte, emailRest)" +
                        ")");
        createTable
                ("CREATE TABLE SurPlace (" +
                        "    dateCommande DATE FOREIGN KEY REFERENCES Commande (dateCommande)," +
                        "    heureCommande TIMESTAMP FOREIGN KEY REFERENCES Commande (heureCommande)," +
                        "    idCompte INT FOREIGN KEY REFERENCES Compte (idCompte)," +
                        "    emailRest VARCHAR(320) FOREIGN KEY REFERENCES Restaurant (emailRest)," +
                        "    adresseLivraison VARCHAR(100)," +
                        "    infos VARCHAR(500)," +
                        "    heureLivraison TIMESTAMP,)");
        createTable
                ("CREATE TABLE Livraison (" +
                        "    dateCommande DATE REFERENCES Commande (dateCommande)," +
                        "    heureCommande TIMESTAMP REFERENCES Commande (heureCommande)," +
                        "    idCompte INT REFERENCES Compte (idCompte)," +
                        "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                        "    nbPersonne INT," +
                        "    heureArrivee TIMESTAMP," +
                        "    PRIMARY KEY(dateCommande, heureCommande, idCompte, emailRest)" +
                        ")");
        createTable
                ("CREATE TABLE PossedeEvaluation (" +
                        "    dateCommande DATE REFERENCES Commande (dateCommande)," +
                        "    heureCommande TIMESTAMP REFERENCES Commande (heureCommande)," +
                        "    idCompte INT REFERENCES Compte (idCompte)," +
                        "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                        "    dateEval DATE REFERENCES Eval (dateEval)," +
                        "    heureEval TIMESTAMP REFERENCES Eval (heureEval)," +
                        "    PRIMARY KEY (dateCommande, heureCommande, idCompte, emailRest, dateEval, heureEval)" +
                        ")");
        createTable
                ("CREATE TABLE Client (" +
                        "    emailClient VARCHAR(320)," +
                        "    mdp VARCHAR(40)," +
                        "    nomClient VARCHAR(50)," +
                        "    prenomClient VARCHAR(50)," +
                        "    adresseClient VARCHAR(100)," +
                        "    idCompte INT REFERENCES Compte (idCompte) NOT NULL," +
                        "    PRIMARY KEY (emailClient)" +
                        ")");
        createTable
                ("CREATE TABLE Horaire (" +
                        "    jour VARCHAR(8)," +
                        "    heureOuverture TIMESTAMP," +
                        "    heureFermeture TIMESTAMP," +
                        "    PRIMARY KEY (jour, heureOuverture, heureFermeture)" +
                        ")");
        createTable
                ("CREATE TABLE PossedeHoraires (" +
                        "    jour VARCHAR(8) REFERENCES Horaire (jour)," +
                        "    heureOuverture TIMESTAMP REFERENCES Horaire (heureOuverture)," +
                        "    heureFermeture TIMESTAMP REFERENCES Horaire (heureFermeture)," +
                        "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                        "    PRIMARY KEY (jour, heureOuverture, heureFermeture, emailRest)" +
                        ")");
        createTable
                ("CREATE TABLE Plat (" +
                        "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                        "    nomPlat VARCHAR(100)," +
                        "    prix INT," +
                        "    descPlat VARCHAR(500)," +
                        "    PRIMARY KEY (emailRest, nomPlat)" +
                        ")");
        createTable
                ("CREATE TABLE FaitPartieDe (" +
                        "    dateCommande DATE REFERENCES Commande (dateCommande)," +
                        "    heureCommande TIMESTAMP REFERENCES Commande (heureCommande)," +
                        "    idCompte INT REFERENCES Compte (idCompte)," +
                        "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                        "    nomPlat VARCHAR(100) REFERENCES Plat (nomPlat)," +
                        "    quantiteCommandee INT," +
                        "    PRIMARY KEY (dateCommande, heureCommande, idCompte, emailRest, nomPlat)" +
                        ")");

        createTable
                ("CREATE TABLE Contient (" +
                        "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                        "    nomPlat VARCHAR(100) REFERENCES Plat (nomPlat)," +
                        "    nomAllergene VARCHAR(100)," +
                        "    PRIMARY KEY (nomAllergene)" +
                        ")");
    }

    public static void createTable(String query) {
        try {
            PreparedStatement stmt = Database.getDb().prepareStatement(query);
            stmt.executeQuery();
            stmt.close();
            System.out.println("Created new table " + query.split(" ")[2]);
        } catch (SQLException e) {
            System.err.println("SQL request failed");
            e.printStackTrace(System.err);
        }
    }

    public static void deleteTables() {
        dropTable("Contient");
        dropTable("FaitPartieDe");
        dropTable("Plat");
        dropTable("PossedeHoraires");
        dropTable("Horaire");
        dropTable("Client");
        dropTable("PossedeEvaluation");
        dropTable("Livraison");
        dropTable("SurPlace");
        dropTable("Commande");
        dropTable("Compte");
        dropTable("Eval");
        dropTable("EstCategorieDe");
        dropTable("APourMere");
        dropTable("Categorie");
        dropTable("Restaurant");

    }

    public static void dropTable(String tableName) {
        try {
            PreparedStatement stmt = Database.getDb().prepareStatement("DROP TABLE " + tableName);
            stmt.executeQuery();
            stmt.close();
            System.out.println("Dropped table " + tableName);
        } catch (SQLException e) {
            System.err.println("SQL request failed");
            e.printStackTrace(System.err);
        }
    }
}
