package demo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 * Class handling databases connections, commits, and requests
 */
public class Database {
    public static Connection getDb() {
        return db;
    }

    private static java.sql.Connection db;

    public static void connection() {
        try {
            System.out.println("Importation du driver...");
            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
            System.out.println("Connexion à la base de données...");
            db = DriverManager.getConnection("jdbc:oracle:thin:@oracle1.ensimag.fr:1521:oracle1", "eyraudh", "eyraudh");
            System.out.println("Connection réussie !");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void closeConnection() {
        try {
            db.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void createTables() {
        try {
            Database.getDb().prepareStatement
                    ("CREATE TABLE Categorie (nomCategorie VARCHAR(100), PRIMARY KEY(nomCategorie));").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE APourMere(" +
                            "    nomCategorieFille VARCHAR(100) REFERENCES Categorie (nomCategorie)," +
                            "    nomCategorieMere VARCHAR(100) REFERENCES Categorie (nomCategorie)," +
                            "    PRIMARY KEY (nomCategorieFille)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE EstCategorieDe (" +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    nomCategorie VARCHAR(100) REFERENCES Categorie (nomCategorie)," +
                            "    PRIMARY KEY(emailRest, nomCategorie)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE Restaurant (" +
                            "    emailRest VARCHAR(320)," +
                            "    nomRest VARCHAR(100)," +
                            "    telRest VARCHAR(20)," +
                            "    adresseRest VARCHAR(100)," +
                            "    presentation VARCHAR(500)," +
                            "    capaciteMax INT," +
                            "    noteRest INT," +
                            "    PRIMARY KEY (emailRest)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE Eval (" +
                            "    dateEval DATE," +
                            "    heureEval TIME," +
                            "    avis VARCHAR(500)," +
                            "    note INT," +
                            "    PRIMARY KEY (dateEval, heureEval, avis, note)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE Compte (" +
                            "    idCompte INT GENERATED BY DEFAULT AS IDENTITY," +
                            "    PRIMARY KEY (idCompte)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE Commande (" +
                            "    dateCommande DATE," +
                            "    heureCommande TIME," +
                            "    idCompte INT REFERENCES Compte (idCompte)," +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    prixCommande INT," +
                            "    statut VARCHAR(30) CHECK (statut IN ('attente','validee','disponible','livraison','annuleeClient','annuleeRest'))," +
                            "    PRIMARY KEY (dateCommande, heureCommande, idCompte, emailRest)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE SurPlace (" +
                            "    dateCommande DATE REFERENCES Commande (dateCommande)," +
                            "    heureCommande TIME REFERENCES Commande (heureCommande)," +
                            "    idCompte INT REFERENCES Comptes (idCompte)," +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    adresseLivraison VARCHAR(100)," +
                            "    infos VARCHAR(500)," +
                            "    heureLivraison TIME," +
                            "    PRIMARY KEY(dateCommande, heureCommande, idCompte, emailRest)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE Livraison (" +
                            "    dateCommande DATE REFERENCES Commande (dateCommande)," +
                            "    heureCommande TIME REFERENCES Commande (heureCommande)," +
                            "    idCompte INT REFERENCES Comptes (idCompte)," +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    nbPersonne INT," +
                            "    heureArrivee TIME," +
                            "    PRIMARY KEY(dateCommande, heureCommande, idCompte, emailRest)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE PossedeEvaluation (" +
                            "    dateCommande DATE REFERENCES Commande (dateCommande)," +
                            "    heureCommande TIME REFERENCES Commande (heureCommande)," +
                            "    idCompte INT REFERENCES Comptes (idCompte)," +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    dateEval DATE REFERENCES Eval (dateEval)," +
                            "    heureEval TIME REFERENCES Eval (heureEval)," +
                            "    PRIMARY KEY (dateCommande, heureCommande, idCompte, emailRest, dateEval, heureEval)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE Client (" +
                            "    emailClient VARCHAR(320)," +
                            "    mdp VARCHAR(40)," +
                            "    nomClient VARCHAR(50)," +
                            "    prenomClient VARCHAR(50)," +
                            "    adresseClient VARCHAR(100)," +
                            "    idCompte INT REFERENCES Compte (idCompte) NOT NULL," +
                            "    PRIMARY KEY (emailClient)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE Horaire (" +
                            "    jour VARCHAR(8)," +
                            "    heureOuverture TIME," +
                            "    heureFermeture TIME," +
                            "    PRIMARY KEY (jour, heureOuverture, heureFermeture)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE PossedeHoraires (" +
                            "    jour VARCHAR(8) REFERENCES Horaire (jour)," +
                            "    heureOuverture TIME REFERENCES Horaire (heureOuverture)," +
                            "    heureFermeture TIME REFERENCES Horaire (heureFermeture)," +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    PRIMARY KEY (jour, heureOuverture, heureFermeture, emailRest)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE Plat (" +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    nomPlat VARCHAR(100)," +
                            "    prix INT," +
                            "    descPlat VARCHAR(500)," +
                            "    PRIMARY KEY (emailRest, nomPlat)" +
                            ");").executeQuery();
            Database.getDb().prepareStatement
                    ("CREATE TABLE FaitPartieDe (" +
                            "    dateCommande DATE REFERENCES Commande (dateCommande)," +
                            "    heureCommande TIME REFERENCES Commande (heureCommande)," +
                            "    idCompte INT REFERENCES Compte (idCompte)," +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    nomPlat VARCHAR(100) REFERENCES Plat (nomPlat)," +
                            "    quantiteCommandee INT," +
                            "    PRIMARY KEY (dateCommande, heureCommande, idCompte, emailRest, nomPlat)" +
                            ");").executeQuery();

            Database.getDb().prepareStatement
                    ("CREATE TABLE Contient (" +
                            "    emailRest VARCHAR(320) REFERENCES Restaurant (emailRest)," +
                            "    nomPlat VARCHAR(100) REFERENCES Plat (nomPlat)," +
                            "    nomAllergene VARCHAR(100)," +
                            "    PRIMARY KEY (emailRest, nomPlat, nomAllergene)" +
                            ");").executeQuery();
        } catch (SQLException e) {
            System.err.println("SQL request failed");
            e.printStackTrace(System.err);
        }
    }

    public static void deleteTables() {
        try {
            Database.getDb().prepareStatement("DROP TABLE Contient;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE FaitPartieDe;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Plat;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE PossedeHoraires;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Horaire;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Client;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE PossedeEvaluation;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Livraison;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE SurPlace;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Commande;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Compte;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Eval;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Restaurant;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE EstCategorieDe;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE APourMere;").executeQuery();
            Database.getDb().prepareStatement("DROP TABLE Categorie;").executeQuery();

        } catch (SQLException e) {
            System.err.println("SQL request failed");
            e.printStackTrace(System.err);
        }
    }
}
