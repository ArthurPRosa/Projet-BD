package demo;

import java.sql.*;

/**
 * Class handling databases connections, commits, and requests
 */
public class Database {
    public static Connection getDb() {
        return db;
    }

    private static java.sql.Connection db;

    public static void connection() {
        try {
            System.out.println("Importation du driver...");
            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
            System.out.println("Connexion à la base de données...");
            db = DriverManager.getConnection("jdbc:oracle:thin:@oracle1.ensimag.fr:1521:oracle1", "eyraudh", "eyraudh");
            System.out.println("Connection réussie !");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void closeConnection() {
        try {
            db.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void createTables() {
        createTable("CREATE TABLE Categorie (\n" +
                        "nomCategorie VARCHAR(100)," +
                        "PRIMARY KEY(nomCategorie)" +
                        ")");
        createTable
                ("CREATE TABLE APourMere(" +
                        "nomCategorieFille VARCHAR(100), " +
                        "nomCategorieMere VARCHAR(100), " +
                        "FOREIGN KEY (nomCategorieFille) REFERENCES Categorie (nomCategorie))");
        createTable
                ("CREATE TABLE Restaurant (" +
                        "emailRest VARCHAR(320)," +
                        "nomRest VARCHAR(100)," +
                        "telRest VARCHAR(20)," +
                        "adresseRest VARCHAR(100)," +
                        "presentation VARCHAR(500)," +
                        "capaciteMax INT," +
                        "PRIMARY KEY (emailRest)" +
                        ")");
        createTable
                ("CREATE TABLE EstCategorieDe (" +
                        "emailRest VARCHAR(320)," +
                        "nomCategorie VARCHAR(100)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest)," +
                        "FOREIGN KEY (nomCategorie) REFERENCES Categorie (nomCategorie))");
        createTable
                ("CREATE TABLE Eval (" +
                        "dateEval DATE," +
                        "heureEval TIMESTAMP," +
                        "avis VARCHAR(500)," +
                        "note INT," +
                        "PRIMARY KEY (dateEval, heureEval, avis, note)" +
                        ")");
        createTable
                ("CREATE TABLE Compte (" +
                        "idCompte INT GENERATED BY DEFAULT AS IDENTITY," +
                        "PRIMARY KEY (idCompte)" +
                        ")");
        createTable
                ("CREATE TABLE Commande (" +
                        "dateCommande DATE," +
                        "heureCommande TIMESTAMP," +
                        "idCompte INT," +
                        "emailRest VARCHAR(320)," +
                        "prixCommande INT," +
                        "statut VARCHAR(30) CHECK (statut IN ('attente','validee','disponible','livraison','annuleeClient','annuleeRest'))," +
                        "PRIMARY KEY (dateCommande, heureCommande)," +
                        "FOREIGN KEY (idCompte) REFERENCES Compte (idCompte)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest)" +
                        ")");
        createTable
                ("CREATE TABLE SurPlace (" +
                        "dateCommande DATE," +
                        "heureCommande TIMESTAMP," +
                        "idCompte INT," +
                        "emailRest VARCHAR(320)," +
                        "adresseLivraison VARCHAR(100)," +
                        "infos VARCHAR(500)," +
                        "heureLivraison TIMESTAMP," +
                        "FOREIGN KEY (dateCommande, heureCommande) REFERENCES Commande (dateCommande, heureCommande)," +
                        "FOREIGN KEY (idCompte) REFERENCES Compte (idCompte)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest))");
        createTable
                ("CREATE TABLE Livraison (" +
                        "dateCommande DATE," +
                        "heureCommande TIMESTAMP," +
                        "idCompte INT," +
                        "emailRest VARCHAR(320)," +
                        "nbPersonne INT," +
                        "heureArrivee TIMESTAMP," +
                        "FOREIGN KEY (dateCommande, heureCommande) REFERENCES Commande (dateCommande, heureCommande)," +
                        "FOREIGN KEY (idCompte) REFERENCES Compte (idCompte)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest))");
        createTable
                ("CREATE TABLE PossedeEvaluation (" +
                        "dateCommande DATE," +
                        "heureCommande TIMESTAMP," +
                        "idCompte INT," +
                        "emailRest VARCHAR(320)," +
                        "dateEval DATE," +
                        "heureEval TIMESTAMP," +
                        "avis VARCHAR(500)," +
                        "note INT," +
                        "FOREIGN KEY (dateEval, heureEval, avis, note) REFERENCES Eval (dateEval, heureEval, avis, note)," +
                        "FOREIGN KEY (dateCommande, heureCommande) REFERENCES Commande (dateCommande, heureCommande)," +
                        "FOREIGN KEY (idCompte) REFERENCES Compte (idCompte)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest))");
        createTable
                ("CREATE TABLE Client (" +
                        "emailClient VARCHAR(320)," +
                        "mdp VARCHAR(40)," +
                        "nomClient VARCHAR(50)," +
                        "prenomClient VARCHAR(50)," +
                        "adresseClient VARCHAR(100)," +
                        "idCompte INT REFERENCES Compte (idCompte) NOT NULL," +
                        "PRIMARY KEY (emailClient)" +
                        ")");
        createTable
                ("CREATE TABLE Horaire (" +
                        "jour VARCHAR(8)," +
                        "heureOuverture TIMESTAMP," +
                        "heureFermeture TIMESTAMP," +
                        "PRIMARY KEY (jour, heureOuverture, heureFermeture)" +
                        ")");
        createTable
                ("CREATE TABLE PossedeHoraires (" +
                        "jour VARCHAR(8)," +
                        "heureOuverture TIMESTAMP," +
                        "heureFermeture TIMESTAMP," +
                        "emailRest VARCHAR(320)," +
                        "FOREIGN KEY (jour, heureOuverture, heureFermeture) REFERENCES Horaire (jour, heureOuverture, heureFermeture)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest))");
        createTable
                ("CREATE TABLE Plat (" +
                        "emailRest VARCHAR(320)," +
                        "nomPlat VARCHAR(100)," +
                        "prix INT," +
                        "descPlat VARCHAR(500)," +
                        "PRIMARY KEY (nomPlat)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest))");
        createTable(
                "CREATE TABLE Allergene (" +
                        "nomAllergene VARCHAR(100) PRIMARY KEY" +
                        ")"
        );
        createTable
                ("CREATE TABLE FaitPartieDe (" +
                        "dateCommande DATE," +
                        "heureCommande TIMESTAMP," +
                        "idCompte INT," +
                        "emailRest VARCHAR(320)," +
                        "nomPlat VARCHAR(100)," +
                        "quantiteCommandee INT," +
                        "FOREIGN KEY (dateCommande, heureCommande) REFERENCES Commande (dateCommande, heureCommande)," +
                        "FOREIGN KEY (idCompte) REFERENCES Compte (idCompte)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest)," +
                        "FOREIGN KEY (nomPlat) REFERENCES Plat (nomPlat))");

        createTable
                ("CREATE TABLE Contient (" +
                        "emailRest VARCHAR(320)," +
                        "nomPlat VARCHAR(100)," +
                        "nomAllergene VARCHAR(100)," +
                        "FOREIGN KEY (emailRest) REFERENCES Restaurant (emailRest)," +
                        "FOREIGN KEY (nomPlat) REFERENCES Plat (nomPlat)," +
                        "FOREIGN KEY (nomAllergene) REFERENCES Allergene (nomAllergene))");
    }

    public static void createTable(String query) {
        try {
            Statement stmt = Database.getDb().createStatement();
            stmt.executeQuery(query);
            stmt.close();
            System.out.println("Created new table " + query.split(" ")[2]);
        } catch (SQLException e) {
            System.err.println("SQL request failed");
            e.printStackTrace(System.err);
        }
    }

    public static void deleteTables() {
        dropTable("Contient");
        dropTable("FaitPartieDe");
        dropTable("Allergene");
        dropTable("Plat");
        dropTable("PossedeHoraires");
        dropTable("Horaire");
        dropTable("Client");
        dropTable("PossedeEvaluation");
        dropTable("Livraison");
        dropTable("SurPlace");
        dropTable("Commande");
        dropTable("Compte");
        dropTable("Eval");
        dropTable("EstCategorieDe");
        dropTable("APourMere");
        dropTable("Categorie");
        dropTable("Restaurant");

    }

    public static void dropTable(String tableName) {
        try {
            Statement stmt = Database.getDb().createStatement();
            stmt.executeQuery("DROP TABLE " + tableName);
            stmt.close();
            System.out.println("Dropped table " + tableName);
        } catch (SQLException e) {
            System.err.println("SQL request failed");
            e.printStackTrace(System.err);
        }
    }

    public static void populate() {
        executeCommand("INSERT INTO Categorie VALUES ('Cuisine savoyarde')");
        executeCommand("INSERT INTO Restaurant VALUES " +
                "('montagne-rouge@outlook.fr'," +
                " 'La Montagne Rouge', " +
                "0169325643, " +
                "'3 rue de la Montagne', " +
                "'Un bon restaurant de la montagne.', " +
                "100)");
    }

    public static void executeCommand(String query) {
        try {
            Statement stmt = Database.getDb().createStatement();
            stmt.executeQuery(query);
            stmt.close();
            System.out.println("Successfully executed " + query.split(" ")[0] + " command");
        } catch (SQLException e) {
            System.err.println("SQL request failed");
            e.printStackTrace(System.err);
        }
    }
}
